// libraries
#include <MKRGSM.h>
//#include <TMP36.h>

// Please enter your sensitive data in the Secret tab or arduino_secrets.h
// PIN Number

#include <OneWire.h>
#include <DallasTemperature.h>

#define ONE_WIRE_BUS 2  // DS18B20 pin, what pin we're connected to
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature DS18B20(&oneWire);

String apiKey = "BHZO61ZX9LLLAYIK";
#define PINNUMBER      "0000"

// APN data
#define GPRS_APN       "4g.tele2.se"
#define GPRS_LOGIN     ""
#define GPRS_PASSWORD  ""

// initialize the library instance
GPRS gprs;
GSM gsmAccess;     // include a 'true' parameter for debug enabled
GSMClient client; // port 80 (http default)

// timeout
const unsigned long __TIMEOUT__ = 10 * 1000;

//TMP36 myTMP36(A0, 3.3);


void setup() {}

void loop() {
  // initialize serial communications and wait for port to open:
  //Serial.begin(9600);
  //while (!Serial) {
  //  ; // wait for serial port to connect. Needed for native USB port only
  //}
  //Serial.println("Starting Arduino web client.");
  
  // connection state
  boolean connected = false;


  while (!connected) {
    if ((gsmAccess.begin(PINNUMBER) == GSM_READY) &&
        (gprs.attachGPRS("4g.tele2.se", "", "") == GPRS_READY)) {
      connected = true;

    } else {
      Serial.println("Not connected");
      delay(1000);
    }
  }

  Serial.println("Connecting...");
  // if you get a connection, report back via serial:
  if (client.connect("api.thingspeak.com", 80)) {
    Serial.println("connected");
    // Make a HTTP request:
    client.print("GET ");
//    client.print(path);
    client.println(" HTTP/1.1");
    client.print("Host: ");
//    client.println(server);
    client.println("Connection: close");
    client.println();
  } else {
    // if you didn't get a connection to the server:
    Serial.println("connection failed");
  }

     //Get IP.
 //IPAddress LocalIP = gprs.getIPAddress();
 //Serial.println("Server IP address=");
 //Serial.println(LocalIP);
 
 //



  GSMClient client;
  
DS18B20.requestTemperatures();
  float t = DS18B20.getTempCByIndex(0);
  if (isnan(t)) {              
    Serial.println("Failed to read from sensor!");
    return;
  }

//  float t = myTMP36.getTempC();
//  if (isnan(t)) {              
//    Serial.println("Failed to read from sensor!");
//    return;
//  }
 
  if (client.connect("api.thingspeak.com",80)) {  //   "184.106.153.149" or api.thingspeak.com

    String postStr = apiKey;
           postStr +="&field1=";
        
           postStr += String(t);
           postStr += "\r\n\r\n";
 
     client.print("POST /update HTTP/1.1\n"); 
     client.print("Host: api.thingspeak.com\n"); 
     client.print("Connection: close\n"); 
     client.print("X-THINGSPEAKAPIKEY: "+apiKey+"\n"); 
     client.print("Content-Type: application/x-www-form-urlencoded\n"); 
     client.print("Content-Length: "); 
     client.print(postStr.length()); 
     client.print("\n\n"); 
     client.print(postStr);
           
 
     Serial.print("Temperature: ");
     Serial.print(t);
     Serial.print(" degrees Celcius"); // Humidity: "); 
     Serial.println(" send to Thingspeak");    
  }
  client.stop();
   
  Serial.println("Waiting...");    
  // thingspeak needs minimum 15 sec delay between updates
  gsmAccess.shutdown();
 delay(5*60*1000);
  
}
